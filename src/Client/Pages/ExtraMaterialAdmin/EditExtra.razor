@using shared.Equipment
@using devops_23_24_net_a02.Client.Files
@inject IEquipmentService EquipmentService;
@inject IStorageService StorageService;


<EditForm Model="@Model" OnValidSubmit="UpdateEquipmentAsync">
    <Blazored.FluentValidation.FluentValidationValidator/>

    <MudTextField @bind-Value="Model.Title"
                  For="@(() => Model.Title)"
                  Label="Titel"
                  Variant="Variant.Outlined"
                  data-test-id="admin-extra-edit-title"/>

    <MudNumericField @bind-Value="Model.Price"
                     Class="mt-3"
                     Label="Prijs"
                     For="@(() => Model.Price)"
                     Variant="Variant.Outlined"
                     Step="0.01M"
                     Min="0.0M"
                     data-test-id="admin-extra-edit-price"/>

    <MudNumericField @bind-Value="Model.Stock"
                     Class="mt-3"
                     Label="Stock"
                     For="@(() => Model.Stock)"
                     Variant="Variant.Outlined"
                     Step="1"
                     Min="0"
                     data-test-id="admin-extra-edit-stock"/>

    <MudText Class="mt-5 mb-1" Typo="Typo.body2">Onderscheid je attributen in de text met een ";"</MudText>

    <MudTextField @bind-Value="Model.Attributes"
                  For="@(() => Model.Attributes)"
                  Label="Attributen"
                  Variant="Variant.Outlined"
                  Lines="3"
                  data-test-id="admin-extra-edit-attributes"/>

    <MudCheckBox @bind-Checked="@Model.IsActive"
                 For="@(() => Model.IsActive)"
                 Label="Is actief"
                 Color="Color.Primary"
                 Size="Size.Medium">
    </MudCheckBox>

    <MudGrid Class="mt-2 mb-2">
        <MudItem xs="12">
            <MudStack Style="width: 100%">
                <MudFileUpload T="IBrowserFile"
                               OnFilesChanged="OnInputFileChanged"
                               Hidden="@false"
                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                               InputStyle="opacity:0"
                               Context="InputFile"
                               @ondragenter="@SetDragClass"
                               @ondragleave="@ClearDragClass"
                               @ondragend="@ClearDragClass">
                    <ButtonTemplate>
                        <MudPaper Height="150px"
                                  Outlined="true"
                                  Class="@_dragClass">
                            <MudText Typo="Typo.h6">
                                Laad een foto op
                            </MudText>
                            @foreach (var file in _fileNames)
                            {
                                <MudChip Color="Color.Dark" Text="@file"/>
                            }
                        </MudPaper>
                        <MudToolBar DisableGutters="true"
                                    Class="relative d-flex justify-end gap-4 z-30">
                            <MudButton HtmlTag="label"
                                       Color="Color.Primary"
                                       Variant="Variant.Filled"
                                       for="@InputFile">
                                Open een bestand
                            </MudButton>
                            <MudButton OnClick="@Clear"
                                       Color="Color.Error"
                                       Disabled="@(!_fileNames.Any())"
                                       Variant="Variant.Filled">
                                Verwijder foto
                            </MudButton>
                        </MudToolBar>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudStack>
        </MudItem>

    </MudGrid>

    <MudGrid Class="mt-6">
        <MudItem xs="1">

        </MudItem>
        <MudItem xs="5">
            <MudButton Class="mr-1" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" ButtonType="ButtonType.Submit" data-test-id="extras-admin-edit-editbutton">Pas aan</MudButton>
        </MudItem>
        <MudItem xs="5">
            <MudButton Class="ml-1" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary">Annuleren</MudButton>
        </MudItem>
        <MudItem xs="1">

        </MudItem>
    </MudGrid>

</EditForm>


@code {

    [Parameter]
    public int EquipmentId { get; set; }

    [Parameter]
    public EventCallback Close { get; set; }

    [Parameter]
    public EventCallback Refresh { get; set; }

    private IBrowserFile? _image;

    private EquipmentDto.Mutate Model { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var response = await EquipmentService.GetSpecificMutateAsync(EquipmentId);
        Model = new EquipmentDto.Mutate
        {
            Title = response.Title,
            Stock = response.Stock,
            Price = decimal.Round(response.Price, 2),
            Attributes = response.Attributes,
            ImageData = response.ImageData,
            IsActive = response.IsActive
        };
        StateHasChanged();
    }

    private async Task UpdateEquipmentAsync()
    {
        if (_image is not null)
        {
            var result = await EquipmentService.UpdateWithImageAsync(EquipmentId, Model);
            await StorageService.UploadImageAsync(result.Image!.ImageUrl!, _image!);
        }
        else await EquipmentService.UpdateAsync(EquipmentId, Model);
        await Close.InvokeAsync();
        await Refresh.InvokeAsync();
    }

        private const string DefaultDragClass = "relative rounded-lg border-2 pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    private readonly List
        <string> _fileNames = new();

    private async Task Clear()
    {
        _fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
    {
        _image = null;
        _dragClass = DefaultDragClass;
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        var files = e.GetMultipleFiles();
        _fileNames.Clear();
        if (!files.Any()) return;

        var newestFile = files.First();
        _fileNames.Add(newestFile.Name);
        _image = e.File;
        Model.ImageContentType = _image.ContentType;
    }

}