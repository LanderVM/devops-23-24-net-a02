@page "/event/eventdetails"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using GoogleMapsComponents.Maps.Places
@using Size = MudBlazor.Size
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<PageTitle>Stap 1</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 4vw">
    <MudGrid Justify="Justify.SpaceEvenly">
        <MudItem lg="2" md="2" sm="12">
            <MudTimeline Class="sticky" Style="height:510px" TimelinePosition=TimelinePosition.Left>
                <MudTimelineItem Color=Color.Primary Size="Size.Large" Variant="Variant.Filled">
                    <ItemDot>
                        <MudText Style="color:#FFFFFF;font-size:1.3em">1</MudText>
                    </ItemDot>
                    <ItemContent >
                        <MudText Style="color:#A07B37;margin-top:12px">Evenement</MudText>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem Color=Color.Secondary Size="Size.Large" Variant="Variant.Filled" Style="height:170px">
                    <ItemDot>
                        <MudText Style="color:#FFFFFF;font-size:1.3em">2</MudText>
                    </ItemDot>
                    <ItemContent >
                        <MudText Style="color:#C8A86E;margin-top:60px">Personalia</MudText>
                    </ItemContent>
                </MudTimelineItem>
                <MudTimelineItem Color=Color.Secondary Size="Size.Large" Variant="Variant.Filled">
                    <ItemDot>
                        <MudText Style="color:#FFFFFF;font-size:1.3em">3</MudText>
                    </ItemDot>
                    <ItemContent >
                        <MudText Style="color:#C8A86E;margin-top:12px">Extra materiaal</MudText>
                    </ItemContent>
                </MudTimelineItem>
            </MudTimeline>
        </MudItem>
        
        <MudItem lg="4" md="10" sm="12" Style="max-width: 500px">
            <GoogleMap @ref="@Map" Id="map1" Options="@_options" Height="410px" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
            <MudText Class="ml-16 mb-1" Typo="Typo.h6">Adres</MudText>
            <MudTextField @ref="_addressSearch" Class="ml-16 mr-16 mb-4 pt-2" Label="Adres" Variant="Variant.Outlined" T="string"/>
        </MudItem>
        <MudItem lg="4" md="10" sm="12" Style="max-width: 770px">
            <MudDateRangePicker 
                Color="Color.Primary"
                Elevation="2"
                Label="Placeholder" 
                Editable="true"
                @bind-DateRange="_dateRange" 
                PlaceholderStart="Start Date" 
                PlaceholderEnd="End Date" 
                Date="@(DateTime.Today.AddDays(1))"
                PickerVariant="PickerVariant.Static"
                IsDateDisabledFunc="@((DateTime dt) => dt.Date < DateTime.Now.Date || (int)dt.DayOfWeek == 0 || (int)dt.DayOfWeek == 6)"
            />
            <div style="width: 100%">
                <MudTimePicker Class="d-inline-flex" Label="Start Uur" Editable="true"/>
                <MudTimePicker Class="d-inline-flex" Label="Eind Uur  " Editable="true"/>
                <MudTextField Class="d-inline-flex" @bind-Value="intValue" Label="Aantal Personen" />
            </div>
            
             
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem lg="2" md="2" sm="12" xs="12">
    
        </MudItem>
        <MudItem lg="4" md="4" sm="12" xs="12">
           
        </MudItem>
        <MudItem lg="4" md="4" sm="5" xs="5">
    
        </MudItem>
        <MudItem lg="2" md="2" sm="7" xs="7">
            <MudButton Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" OnClick="@ClickVolgende">Volgende</MudButton>
        </MudItem>
    </MudGrid>
    
    
    
   
</MudContainer>


@code {
    private void ClickVolgende()
    {
        NavigationManager.NavigateTo("/personaldetails");
    }
    int intValue;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(3).Date); 
    
    
    private GoogleMap Map { get; set; } = default!;

    private readonly MapOptions _options = new()
    { Zoom = 13, Center = new LatLngLiteral { Lat = 50.93735122680664, Lng = 4.03336238861084 }, MapTypeId = MapTypeId.Roadmap, DisableDefaultUI = true, };

    private Marker? _selectedLocation;

    private Autocomplete _autocomplete = default!;
    private MudTextField<string> _addressSearch = default!;

    private async Task SetDefaultMarker()
    {
        var marker = await Marker.CreateAsync(Map.JsRuntime,
            new MarkerOptions
            {
                Position = await Map.InteropObject.GetCenter(),
                Map = Map.InteropObject,
                Title = "HOGENT Campus Aalst"
            });
        await UpdateMarker(marker);
    }

    private async Task OnAfterMapInit()
    {
        await SetDefaultMarker();
        _autocomplete = await Autocomplete.CreateAsync(Map.JsRuntime, _addressSearch.InputReference.ElementReference, new AutocompleteOptions
        {
            StrictBounds = false,
            ComponentRestrictions = new ComponentRestrictions { Country = new[] { "be" } }
        });

        await _autocomplete.SetFields(new[] { "address_components", "geometry", "name" });

        await _autocomplete.AddListener("place_changed", async () =>
        {
            PlaceResult place = await _autocomplete.GetPlace();

            if (place.Geometry.Location is not null)
            {
                await Map.InteropObject.SetCenter(place.Geometry.Location);
                await Map.InteropObject.SetZoom(13);

                var marker = await Marker.CreateAsync(Map.JsRuntime, new MarkerOptions
                {
                    Position = place.Geometry.Location,
                    Map = Map.InteropObject,
                    Title = place.Name
                });
                await UpdateMarker(marker);
            }
            else if (place.Geometry.Viewport is not null)
            {
                await Map.InteropObject.FitBounds(place.Geometry.Viewport, 5);
            }

            StateHasChanged();
        });
    }

    private async Task UpdateMarker(Marker marker)
    {
        if (_selectedLocation is not null) await _selectedLocation.SetMap(null);
        _selectedLocation = marker;
    }

}