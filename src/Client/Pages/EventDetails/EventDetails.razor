@page "/event/details"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using GoogleMapsComponents.Maps.Places

<div style="height:100px">
    <GoogleMap @ref="@Map" Id="map1" Options="@_options" Height="500px" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
    <MudText Class="ml-16 mb-1" Typo="Typo.h6">Adres</MudText>
    <MudTextField @ref="_addressSearch" Class="ml-16 mr-16 mb-4 pt-2" Label="Adres" Variant="Variant.Outlined" T="string"></MudTextField>
</div>

@code {
    private GoogleMap Map { get; set; } = default!;

    private readonly MapOptions _options = new()
    { Zoom = 13, Center = new LatLngLiteral { Lat = 50.93735122680664, Lng = 4.03336238861084 }, MapTypeId = MapTypeId.Roadmap, DisableDefaultUI = true, };

    private Marker? _selectedLocation;

    private Autocomplete _autocomplete = default!;
    private MudTextField<string> _addressSearch = default!;

    private async Task SetDefaultMarker()
    {
        var marker = await Marker.CreateAsync(Map.JsRuntime,
            new MarkerOptions
            {
                Position = await Map.InteropObject.GetCenter(),
                Map = Map.InteropObject,
                Title = "HOGENT Campus Aalst"
            });
        await UpdateMarker(marker);
    }

    private async Task OnAfterMapInit()
    {
        await SetDefaultMarker();
        _autocomplete = await Autocomplete.CreateAsync(Map.JsRuntime, _addressSearch.InputReference.ElementReference, new AutocompleteOptions
        {
            StrictBounds = false,
            ComponentRestrictions = new ComponentRestrictions { Country = new[] { "be" } }
        });

        await _autocomplete.SetFields(new[] { "address_components", "geometry", "name" });

        await _autocomplete.AddListener("place_changed", async () =>
        {
            var place = await _autocomplete.GetPlace();

            if (place.Geometry.Location is not null)
            {
                await Map.InteropObject.SetCenter(place.Geometry.Location);
                await Map.InteropObject.SetZoom(13);

                var marker = await Marker.CreateAsync(Map.JsRuntime, new MarkerOptions
                {
                    Position = place.Geometry.Location,
                    Map = Map.InteropObject,
                    Title = place.Name
                });
                await UpdateMarker(marker);
            }
            else if (place.Geometry.Viewport is not null)
            {
                await Map.InteropObject.FitBounds(place.Geometry.Viewport, 5);
            }

            StateHasChanged();
        });
    }

    private async Task UpdateMarker(Marker marker)
    {
        if (_selectedLocation is not null) await _selectedLocation.SetMap(null);
        _selectedLocation = marker;
    }

}