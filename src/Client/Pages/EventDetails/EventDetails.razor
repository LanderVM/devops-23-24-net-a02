@page "/aanvraag/evenement-gegevens"
@using shared.Quotations
@using Size = MudBlazor.Size
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using GoogleMapsComponents.Maps.Places
@using shared.Common
@inject NavigationManager NavigationManager
@inject EventDetailsState EventDetailsState



<PageTitle>Stap 1</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 4vw">
    <MudGrid Justify="Justify.SpaceEvenly">
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <MudItem lg="12" md="12" sm="5" xs="5">

            </MudItem>
            <MudItem lg="2" md="2" sm="7" xs="7">
                <TimeLineVertical step="1"></TimeLineVertical>
            </MudItem>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudItem lg="2" md="2" sm="2" xs="2">

            </MudItem>
            <MudItem lg="8" md="8" sm="8" xs="8">
                <TimeLineHorizontal step="1"></TimeLineHorizontal>
            </MudItem>
            <MudItem lg="2" md="2" sm="2" xs="2">

            </MudItem>
        </MudHidden>

        <MudItem lg="4" md="10" sm="12" Style="max-width: 500px">
            <GoogleMap @ref="@Map" Id="map1" Options="@_options" Height="410px" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
            <MudTextField @ref="_addressSearch" Class="ml-16 mr-16 mb-4 pt-2" Label="Adres" Variant="Variant.Outlined" T="string" ErrorText="Gelieve een volledig adres in te geven" Error="@addressError" TextChanged="@(()=>{addressError=false;})" />
        </MudItem>
        <MudItem lg="4" md="10" sm="12" Style="max-width: 770px">
            <MudDateRangePicker Color="Color.Primary"
                                Elevation="2"
                                Label="Placeholder"
                                Editable="true"
                                @bind-DateRange="@_dateRange"
                                PlaceholderStart="Start Date"
                                PlaceholderEnd="End Date"
                                Date="@(DateTime.Today.AddDays(1))"
                                PickerVariant="PickerVariant.Static"
                                IsDateDisabledFunc="@((DateTime dt) => DateRange != null && (dt.Date < DateTime.Now.Date || DateRange.Any(d => d.StartTime.Date <= dt.Date && dt.Date <= d.EndTime.Date)))"
 />
            <div style="width: 100%">
                @if (FormulaState.ChosenFormulaId!=1)
                {
                    <MudSwitch @bind-Checked="@EventDetailsState.HasTripleBeer" Label="Bestel trippel bier i.p.v. blond" Color="Color.Primary" UnCheckedColor="Color.Secondary" />
                }
                <MudNumericField Class="d-inline-flex" @bind-Value="@EventDetailsState.NumberOfPeople" Label="Aantal Personen"Min="0" Max="50000" Error="@numberOfPeopleError" ErrorText="Gelieve een geldig nummer op te geven" />
            </div>


        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem lg="2" md="2" sm="12" xs="12">

        </MudItem>
        <MudItem lg="4" md="4" sm="12" xs="12">

        </MudItem>
        <MudItem lg="4" md="4" sm="5" xs="5">

        </MudItem>
        <MudItem lg="2" md="2" sm="7" xs="7">
            <MudButton Class="mb-2" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" OnClick="@ClickNext">Volgende</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private bool addressError;
    private bool numberOfPeopleError;
    private bool hasValidAdress;

    private IEnumerable<QuotationDto.Dates>? DateRange;

    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;
    
    [Inject]
    public IQuotationService QuotationService { get; set; } = default!;
    
    [Inject]
    public FormulaState FormulaState { get; set; } = default!;
    
    [Inject]
    public PersonalDetailsState PersonalDetailsState { get; set; } = default!;
    
    private DateRange _dateRange; 

    private void ClickNext()
    {
        if (!hasValidAdress || EventDetailsState.NumberOfPeople == 0 || _dateRange == null)
        {
            if (!hasValidAdress)
            {
                addressError = true;
            }

            if (EventDetailsState.NumberOfPeople == 0)
            {
                numberOfPeopleError = true;
            }
            else
            {
                numberOfPeopleError = false;
            }

            if (_dateRange == null)
            {
                Snackbar.Add("Gelieve een geldige start- en einddag aan te duiden", Severity.Error);
            }
        }
        else
        {
            numberOfPeopleError = false;
            addressError = false;
            EventDetailsState.dateRange = _dateRange;
            NavigationManager.NavigateTo(Routes.PersonalDetails);
        }


    }



    protected override async Task OnInitializedAsync()
    {
        if (FormulaState.ChosenFormulaId == null || FormulaState.ChosenFormulaId == 0)
        {
            NavigationManager.NavigateTo(Routes.Formula);
            Snackbar.Add("Gelieve uw offerteaanvraag opnieuw te beginnen.", Severity.Error);
        }
        
        _dateRange = EventDetailsState.dateRange.Start == DateTime.Today ? null: EventDetailsState.dateRange;
        var response = await QuotationService.GetDatesAsync();
        DateRange = response.DateRanges;

    }


    private GoogleMap Map { get; set; } = default!;
    private readonly MapOptions _options = new()
        {
            Zoom = 13,
            Center = new LatLngLiteral { Lat = 50.93735122680664, Lng = 4.03336238861084 },
            MapTypeId = MapTypeId.Roadmap,
            DisableDefaultUI = true,
        };
    private Marker? _selectedLocation;
    private Autocomplete _autocomplete = default!;
    private MudTextField<string> _addressSearch = default!;

    private async Task SetDefaultMarker()
    {
        var marker = await Marker.CreateAsync(Map.JsRuntime,
            new MarkerOptions
                {
                    Position = await Map.InteropObject.GetCenter(),
                    Map = Map.InteropObject,
                    Title = "HOGENT Campus Aalst"
                });
        await UpdateMarker(marker);
    }

    private async Task OnAfterMapInit()
    {
        await SetDefaultMarker();
        _autocomplete = await Autocomplete.CreateAsync(Map.JsRuntime, _addressSearch.InputReference.ElementReference, new AutocompleteOptions
            {
                StrictBounds = false,
                ComponentRestrictions = new ComponentRestrictions { Country = new[] { "be" } }
            });

        await _autocomplete.SetFields(new[] { "ALL" });

        await _autocomplete.AddListener("place_changed", async () =>
        {

            PlaceResult place = await _autocomplete.GetPlace();
            //Console.WriteLine("size adrscomp:" + place.AddressComponents.Count());

            if (place.Geometry.Location is not null)
            {
                await Map.InteropObject.SetCenter(place.Geometry.Location);
                await Map.InteropObject.SetZoom(13);

                var marker = await Marker.CreateAsync(Map.JsRuntime, new MarkerOptions
                    {
                        Position = place.Geometry.Location,
                        Map = Map.InteropObject,
                        Title = place.Name
                    });
                await UpdateMarker(marker);
                EventDetailsState.PlaceTitle = place.Name;
                EventDetailsState.PlaceGeometry = place.Geometry;
            }
            if (place.FormattedAddress is not null)
            {
                Console.WriteLine(place.FormattedAddress);
                var parts = place.FormattedAddress.Split(",");

                var streetHouseNumber = parts[0].Trim().Split(" ");
                var street = string.Join(" ", streetHouseNumber.Take(streetHouseNumber.Length - 1));
                var houseNumber = streetHouseNumber.Last();
                var postalCodeCity = parts[1].Trim().Split(" ");
                var postalCode = postalCodeCity[0];
                var city = string.Join(" ", postalCodeCity.Skip(1));

                EventDetailsState.EventAddress = new AddressDto
                {
                    Street = street,
                    HouseNumber = houseNumber,
                    City = city,
                    PostalCode = postalCode
                };
                EventDetailsState.FormattedAddress = place.FormattedAddress;
            }
             
            if (place.AddressComponents is not null)
            {
                if (EventDetailsState.EventAddress.Street == null ||
                    EventDetailsState.EventAddress.City == null ||
                    EventDetailsState.EventAddress.PostalCode == null || !char.IsDigit(EventDetailsState.EventAddress.PostalCode[0]) ||
                    EventDetailsState.EventAddress.HouseNumber == null || !char.IsDigit(EventDetailsState.EventAddress.HouseNumber[0]))
                {
                    hasValidAdress = false;
                } else
                {
                    hasValidAdress = true;
                }
            }
            
            
            else if (place.Geometry.Viewport is not null)
            {
                await Map.InteropObject.FitBounds(place.Geometry.Viewport, 5);
            }

            StateHasChanged();
        });
    }

    private async Task UpdateMarker(Marker marker)
    {
        if (_selectedLocation is not null) await _selectedLocation.SetMap(null);
        _selectedLocation = marker;
    }

}