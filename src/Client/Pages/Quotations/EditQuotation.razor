@using shared.Quotations
@using shared.Equipment
@using global::Shared.Quotations
<Loader IsLoading="@(_loader)">
    <EditForm Model="@Model" OnValidSubmit="UpdateQuotationAsync">
        <Blazored.FluentValidation.FluentValidationValidator/>
        <MudPaper Class="pa-5 my-6">
            <MudGrid>
                <MudItem xs="3">
                    <MudText>
                        <b>Naam:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.Customer.FirstName @Quotation.Customer.LastName</MudText>
                </MudItem>

                <MudItem xs="3">
                    <MudText>
                        <b>Telefoonnummer:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.Customer.PhoneNumber</MudText>
                </MudItem>

                <MudItem xs="3">
                    <MudText>
                        <b>Email:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.Customer.Email.Email</MudText>
                </MudItem>

                <MudItem xs="3">
                    <MudText>
                        <b>Factuuradres:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.Customer.BillingAddress.Street @Quotation.Customer.BillingAddress.HouseNumber, @Quotation.Customer.BillingAddress.City @Quotation.Customer.BillingAddress.PostalCode</MudText>
                </MudItem>

                @if (Quotation.Customer.VatNumber != null)
                {
                    <MudItem xs="3">
                        <MudText>
                            <b>BTW:</b>
                        </MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText>@Quotation.Customer.VatNumber</MudText>
                    </MudItem>
                }
            </MudGrid>

            <MudDivider Class="my-8"/>

            <MudGrid>
                <MudItem xs="3">
                    <MudText>
                        <b>Gekozen formule:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.Formula.Title</MudText>
                </MudItem>

                <MudItem xs="3">
                    <MudText>
                        <b>Locatieadres:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.EventLocation.Street @Quotation.EventLocation.HouseNumber, @Quotation.EventLocation.City @Quotation.EventLocation.PostalCode</MudText>
                </MudItem>

                <MudItem xs="3">
                    <MudText>
                        <b>Verwacht aantal personen:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.NumberOfPeople</MudText>
                </MudItem>

                <MudItem xs="3">
                    <MudText>
                        <b>Status:</b>
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText>@Quotation.Status</MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudPaper Class="pa-5 my-6" xs="6">
            @if (Model.EquipmentList.ToList().Count != 0)
            {
                <MudTable Items="Model.EquipmentList" CanCancelEdit="true" Hover="true" Context="items">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Extra items</MudText>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width:80%;"/>
                        <col/>
                        <col/>
                        <col/>
                        <col/>
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<EquipmentDto.LinesDetail, object>(x => x.Name)">Naam</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<EquipmentDto.LinesDetail, object>(x => x.Amount)">Aantal</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<EquipmentDto.LinesDetail, object>(x => x.Price)">Eenheid</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<EquipmentDto.LinesDetail, object>(x => x.Price * x.Amount)">Totaal</MudTableSortLabel>
                        </MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Naam">@items.Name</MudTd>
                        <MudTd DataLabel="Aantal">@items.Amount</MudTd>
                        <MudTd DataLabel="Eenheid">€ @items.Price</MudTd>
                        <MudTd DataLabel="Totaal">€ @decimal.Round(items.Price * items.Amount, 2)</MudTd>
                        <MudIcon Class="ma-4" Icon="@Icons.Material.Outlined.Delete" @onclick="@(async () => await DeleteEntry(items))" Size="Size.Small"></MudIcon>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Name">
                            <MudText>@items.Name</MudText>
                        </MudTd>
                        <MudTd DataLabel="Aantal">
                            <MudNumericField @bind-Value="@items.Amount" For="() => items.Amount" Required Min="1"/>
                        </MudTd>
                        <MudTd DataLabel="Eenheid">
                            <MudText>€ @items.Price</MudText>
                        </MudTd>
                        <MudTd DataLabel="Totaal">
                            <MudText>€ @decimal.Round(items.Price * items.Amount, 2)</MudText>
                        </MudTd>
                    </RowEditingTemplate>
                    <EditButtonContent Context="button">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
                    </EditButtonContent>
                </MudTable>
            }
            <MudSwitch @bind-Checked="Model.IsTripelBier"
                       For="@(() => Model.IsTripelBier)"
                       Label="Tripel bier"
                       Class="my-8"
                       Color="Color.Primary"
                       UnCheckedColor="Color.Secondary"/>

            <MudTextField @bind-Value="Model.Opmerking"
                          For="@(() => Model.Opmerking)"
                          Label="Opmerking"
                          Variant="Variant.Outlined"
                          Lines="3"/>
        </MudPaper>
        <MudGrid Class="my-1">
            @if (Quotation.Status == QuotationStatus.Open)
            {
                <MudItem xs="@_buttonSize">
                    <MudButton Class="d-flex align-center justify-center mud-width-full py-2" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" ButtonType="ButtonType.Submit">
                        Doorsturen
                    </MudButton>
                </MudItem>
            }
            <MudItem xs="@_buttonSize">
                <MudButton Class="d-flex align-center justify-center mud-width-full py-2" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" OnClick="Close">
                    Annuleren
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</Loader>


@code {

    [Inject]
    private IQuotationService QuotationService { get; set; } = default!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;

    [Parameter]
    public EventCallback Close { get; set; }

    [Parameter]
    public EventCallback Refresh { get; set; }

    [Parameter]
    public int QuotationId { get; set; }

    private QuotationDto.Edit Model { get; } = new();
    private QuotationDto.DetailEdit Quotation { get; } = new();

    private bool _loader;

    private int _buttonSize = 6;

    protected override async Task OnInitializedAsync()
    {
        _loader = true;
        var response = await QuotationService.GetSpecificDetailEditAsync(QuotationId);
        Quotation.Formula = response.Quotation.Formula;
        Quotation.NumberOfPeople = response.Quotation.NumberOfPeople;
        Quotation.IsTripelBier = response.Quotation.IsTripelBier;
        Quotation.Customer = response.Quotation.Customer;
        Quotation.EventLocation = response.Quotation.EventLocation;
        Quotation.Status = response.Quotation.Status;

        Model.Opmerking = response.Quotation.Opmerking;
        Model.EquipmentList = response.Quotation.Equipment;
        Model.IsTripelBier = response.Quotation.IsTripelBier;
        _loader = false;
        _buttonSize = Quotation.Status == QuotationStatus.Accepted ? 12 : 6;
        StateHasChanged();
    }
    
    private void Cancel()
    {
        Close.InvokeAsync();
    }

    private async Task UpdateQuotationAsync()
    {
        Model.IsAccepted = true;
        await QuotationService.UpdateAsync(QuotationId, Model);
        Snackbar.Add("De offerte werd succesvol aangepast", Severity.Success);

        await Close.InvokeAsync();
        await Refresh.InvokeAsync();
    }

    async Task DeleteEntry(EquipmentDto.LinesDetail item)
    {
        await Task.Delay(0);
        var itemToDelete = Model.EquipmentList.FirstOrDefault(e => e.EquipmentId == item.EquipmentId);

        if (Model.EquipmentList.Contains(item))
        {
            Model.EquipmentList = Model.EquipmentList.Where(e => itemToDelete is not null && e.EquipmentId != itemToDelete.EquipmentId).ToList();
            StateHasChanged();
        }
    }

}