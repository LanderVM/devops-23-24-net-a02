@page "/admin/overzicht/offerte-aanvragen"
@using shared.Quotations
@attribute [Authorize]

<PageTitle>Offertes Overzicht</PageTitle>
<MudContainer Fixed="true" Class="mt-16 mb-16">
    <MudDataGrid Items="@Quotations" Filterable="false" SortMode="@SortMode.None" Groupable="false" data-test-id="admin-quotations-grid">
        <Columns>
            <PropertyColumn Property="x => x.Customer.FirstName" Title="Voornaam"/>
            <PropertyColumn Property="x => x.Customer.LastName" Title="Naam"/>
            <PropertyColumn Property="x => x.Customer.Email"/>
            <PropertyColumn Property="x => x.CreatedAt" Title="Gemaakt op"/>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton data-test-id="admin-quotations-overview-editbutton" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => UpdateItem(context.Item.QuotationId))">Wijzig</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="QuotationDto.Index"/>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {

    [Inject]
    public IQuotationService QuotationService { get; set; } = default!;

    [Inject]
    ISidepanelService Sidepanel { get; set; } = default!;

    private IEnumerable<QuotationDto.Index>? Quotations;

    private bool Loading { get; set; } = true;


    protected override async Task OnInitializedAsync()
    {
        var response = await QuotationService.GetIndexAsync();
        Quotations = response.Quotation;
    }

    private void UpdateItem(object quotationId)
    {
        var callback1 = EventCallback.Factory.Create(this, Close);
        var callback2 = EventCallback.Factory.Create(this, Refresh);


        var parameters = new Dictionary<string, object>
        {
            { nameof(EditQuotation.Close), callback1 },
            { nameof(EditQuotation.Refresh), callback2 },
            { nameof(EditQuotation.QuotationId), quotationId }
        };

        Sidepanel.Open<EditQuotation>("Overzicht", "Offerte", parameters);
    }

    private void Close()
    {
        Sidepanel.Close();
    }

    private async Task Refresh()
    {
        Loading = true;
        var response = await QuotationService.GetIndexAsync();

        Quotations = response.Quotation;

        Loading = false;
        StateHasChanged();
    }

}