@page "/Overzicht"
@using shared.Equipment
@using shared.Quotations
@using Size = MudBlazor.Size
@using GoogleMapsComponents.Maps
@using GoogleMapsComponents
@using global::Domain.Common


<PageTitle>Overzicht</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 4vw">
    <MudGrid Justify="Justify.SpaceEvenly">
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <MudItem lg="12" md="12" sm="5" xs="5">

            </MudItem>
            <MudItem lg="2" md="2" sm="7" xs="7">
                <TimeLineVertical step="3"></TimeLineVertical>
            </MudItem>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudItem lg="2" md="2" sm="2" xs="2">

            </MudItem>
            <MudItem lg="8" md="8" sm="8" xs="8">
                <TimeLineHorizontal step="3"></TimeLineHorizontal>
            </MudItem>
            <MudItem lg="2" md="2" sm="2" xs="2">

            </MudItem>
        </MudHidden>

        <MudItem lg="10" md="10" sm="12" xs="12">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Class="ml-3">Overzicht</MudText>
                    <hr style="background-color:black;height:1.5px;border-width:0;margin-left:13px;margin-right:100px;margin-top:10px;margin-bottom:0px" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Class="ml-3">Evenement</MudText>
                </MudItem>
                <MudItem lg="6" md="6" sm="12" xs="12">
                    <MudGrid>
                        <MudItem xs="5">
                            <MudPaper Class="ma-1" Elevation="3" Style="background-color:#EDE7DB">
                                <MudText Class="mt-1 ml-3">Datum</MudText>
                                <MudText Class="ml-3">@EventDetailsState.dateRange.Start.ToString().Substring(0,10) tot @EventDetailsState.dateRange.End.ToString().Substring(0,10)</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="7">
                            <MudPaper Class="ma-1" Elevation="3" Style="background-color:#EDE7DB">
                                <MudText Class="mt-1 ml-3">Locatie</MudText>
                                <MudText Class="ml-3">@EventDetailsState.FormattedAddress</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudHidden Breakpoint="Breakpoint.MdAndUp">
                            <MudItem lg="6" md="6" sm="12" xs="12">
                                <GoogleMap @ref="@Map" Id="map1" Options="@_options" Height="410px" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
                                <MudPaper Class="mt-4 ml-1 mr-1" Elevation="3" Style="background-color:#EDE7DB">
                                    <MudText Class="mt-1 mb-1 ml-3">Aantal personen op evenement: @(EventDetailsState.NumberOfPeople.ToString())</MudText>
                                    </MudPaper>
                                </MudItem>
                            </MudHidden>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h5" Class="ml-3">Contact en facturatie gegevens</MudText>
                            </MudItem>
                            
                            <MudItem xs="12">
                                <MudPaper Class="ma-1" Elevation="3" Style="background-color:#EDE7DB">
                                    <MudText Class="mt-1 ml-3">Naam</MudText>
                                    <MudText Class="ml-3">@(@PersonalDetailsState.PersonalDetailsObject.LastName + " " + PersonalDetailsState.PersonalDetailsObject.FirstName)</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPaper Class="ma-1" Elevation="3" Style="background-color:#EDE7DB">
                                    <MudText Class="mt-1 ml-3">Email</MudText>
                                    <MudText Class="ml-3">@PersonalDetailsState.PersonalDetailsObject.Email</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPaper Class="ma-1" Elevation="3" Style="background-color:#EDE7DB">
                                    <MudText Class="mt-1 ml-3">Telefoon</MudText>
                                    <MudText Class="ml-3">@PersonalDetailsState.PersonalDetailsObject.PhoneNumber</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPaper Class="ma-1" Elevation="3" Style="background-color:#EDE7DB">
                                    <MudText Class="mt-1 ml-3">Adres</MudText>
                                    <MudText Class="ml-3">@($"{@PersonalDetailsState.PersonalDetailsObject.Street} {@PersonalDetailsState.PersonalDetailsObject.Housenumber} {@PersonalDetailsState.PersonalDetailsObject.PostalCode} {@PersonalDetailsState.PersonalDetailsObject.City}")</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPaper Class="ma-1" Elevation="3" Style="background-color:#EDE7DB">
                                    <MudText Class="mt-1 ml-3">Btw-nummer</MudText>
                                    <MudText Class="ml-3">@(CheckIfBtwNumberIsEmpty())</MudText>
                                </MudPaper>
                            </MudItem>
                            
                        </MudGrid>
                    </MudItem>
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <MudItem lg="6" md="6" sm="12" xs="12">
                            <GoogleMap @ref="@Map" Id="map1" Options="@_options" Height="410px" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
                            <MudPaper Class="mt-4 ml-1 mr-1" Elevation="3" Style="background-color:#EDE7DB">
                                <MudText Class="mt-1 mb-1 ml-3">Aantal personen op evenement: @(EventDetailsState.NumberOfPeople.ToString())</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudHidden>
                    @if (@NoExtraMaterial() == false)
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5" Class="ml-3">Extra materiaal</MudText>
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudGrid>
                        <Loader IsLoading=@(Extras == null)>
                            @foreach (var item in ExtraMaterialState.ExtrasAmount)
                            {
                                @if (item.Value != 0)
                                {
                                    <MudItem lg="3" md="4" sm="6" xs="12">
                                        <OverviewExtraItemsCard ImageUrl="@(Extras.FirstOrDefault(x => x.Id == item.Key).ImageData.ImageUrl)"
                                                                Title="@(Extras.FirstOrDefault(x => x.Id == item.Key).Title)"
                                                                Attributes="@(Extras.FirstOrDefault(x => x.Id == item.Key).Attributes)"
                                                                EquipmentId="@(Extras.FirstOrDefault(x => x.Id == item.Key).Id)"
                                                                Amount="@item.Value"
                                                                Price="@(Extras.FirstOrDefault(x => x.Id == item.Key).Price)"
                                                                ExternalMethod="@RefreshPage">

                                        </OverviewExtraItemsCard>
                                    </MudItem>
                                }
                            }
                        </Loader>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Class="ml-3">Kost</MudText>
                </MudItem>
                <MudItem xs="12">
                    @if (@Extras != null)
                    {
                        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                            <OverviewCostSmallFontsizeComponent Title="@FormulaState.Title"
                                                   PriceFormula="@GetPriceFormulaWithoutBeerAndBarbeque()"
                                                                TotalWithoutBtw="@CalculateTotalWithoutBtw()"
                                                   BtwOnTotal="CalculateBtwOnTotal()"
                                                                TotalWithBtw="@(Decimal.Round(CalculateTotalWithoutBtw(), 2) + Decimal.Round(CalculateBtwOnTotal(), 2))" />
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Xs">
                            <OverviewCostComponent Title="@FormulaState.Title"
                                                   PriceFormula="@GetPriceFormulaWithoutBeerAndBarbeque()"
                                                   TotalWithoutBtw="@CalculateTotalWithoutBtw()"
                                                   BtwOnTotal="CalculateBtwOnTotal()"
                                                   TotalWithBtw="@(Decimal.Round(CalculateTotalWithoutBtw(), 2) + Decimal.Round(CalculateBtwOnTotal(), 2))" />
                        </MudHidden>
                        
                    }
                </MudItem>
            </MudGrid>

        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem lg="2" md="2" sm="12" xs="12">
            
        </MudItem>
        <MudItem lg="4" md="4" sm="12" xs="12">

        </MudItem>
        <MudItem lg="4" md="4" sm="5" xs="5">

        </MudItem>
        <MudItem lg="2" md="2" sm="7" xs="7">
            <MudButton Class="mt-4 mb-4" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" OnClick="@CreateQuotationAsync">Offerte aanvraag verzenden</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {

    [Inject] public IEquipmentService EquipmentService { get; set; } = default!;
    [Inject] public IQuotationService QuotationService { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public ExtraMaterialState ExtraMaterialState { get; set; } = default!;
    [Inject] public FormulaState FormulaState { get; set; } = default!;
    [Inject] public EventDetailsState EventDetailsState { get; set; } = default!;
    [Inject] public PersonalDetailsState PersonalDetailsState { get; set; } = default!;
    [Inject] public IDialogService DialogService { get; set; } = default!;

    
    private IEnumerable<EquipmentDto.Index>? Extras = default!;

    protected override async Task OnInitializedAsync()
    {
        if (PersonalDetailsState.PersonalDetailsObject.Email == null)
        {
            NavigationManager.NavigateTo("/");
            
        }
        EquipmentResult.Index response = await EquipmentService.GetIndexAsync();

        Extras = response.Equipment;

    }

    private bool NoExtraMaterial()
    {
        bool thereIsNoExtraMaterial = true;
        foreach (var item in ExtraMaterialState.ExtrasAmount)
        {
            if (item.Value != 0)
            {
                thereIsNoExtraMaterial = false;
            }
        }
        return thereIsNoExtraMaterial;
    }

    private void RefreshPage()
    {
        StateHasChanged();

    }

    private decimal GetPriceFormulaWithoutBeerAndBarbeque()
    {
        decimal initialPrice = 0M;

        DateTime? start = EventDetailsState.dateRange.Start;
        DateTime? end = EventDetailsState.dateRange.End;
        TimeSpan? dif = end - start;

        int amountOfDaysDiff = (int)dif.Value.TotalDays;
        
        if (amountOfDaysDiff == 0)
        {
            initialPrice = FormulaState.BasePrice[0];
        }
        else if (amountOfDaysDiff == 1)
        {
            initialPrice = FormulaState.BasePrice[1];
        }
        else if (amountOfDaysDiff == 2)
        {
            initialPrice = FormulaState.BasePrice[2];
        }
        else
        {
            int extraDays = amountOfDaysDiff - 2;
            initialPrice = FormulaState.PricePerDayExtra * extraDays + FormulaState.BasePrice[2];
        }

        return initialPrice;
    }
   
    private decimal GetPriceBeer()
    {
        if (FormulaState.ChosenFormulaId == 1)
        {
            return 0.0M;
        } else
        {
            return EventDetailsState.NumberOfPeople * (EventDetailsState.HasTripleBeer?3.0M:1.5M);
        }
    }
    private decimal GetPriceBarbeque()
    {
        if (FormulaState.ChosenFormulaId != 3)
        {
            return 0.0M;
        }
        else
        {
            return EventDetailsState.NumberOfPeople * 12.0M;
        }
    }
   
    private decimal CalculateTransportCost()
    {
        return 0M;
    }
    private decimal CalculateTotalWithoutBtw()
    {

        decimal extrasKosten = 0M;
        foreach (var item in ExtraMaterialState.ExtrasAmount)
        {
            if (item.Value != 0)
            {
                extrasKosten += (Extras.FirstOrDefault(x => x.Id == item.Key).Price * item.Value);
            }
        }
        return CalculateTransportCost() + GetPriceFormulaWithoutBeerAndBarbeque()+GetPriceBeer()+GetPriceBarbeque() + extrasKosten;

    }
    private decimal CalculateBtwOnTotal()
    {
        decimal extrasCostBtw = 0M;

        foreach (var item in ExtraMaterialState.ExtrasAmount)
        {
            if (item.Value != 0)
            {
                extrasCostBtw += ((Extras.FirstOrDefault(x => x.Id == item.Key).Price * item.Value) * 0.21M);
            }
        }
        return (CalculateTransportCost() * 0.21M) + (GetPriceFormulaWithoutBeerAndBarbeque() * 0.21M) + (GetPriceBeer() * 0.12M) + (GetPriceBarbeque()*0.12M) + extrasCostBtw;
    }
        
     public EventLocation ParseAddress(string addressString)
    {
        var parts = addressString.Split(',');
        var streetHouseNumber = parts[0].Trim().Split(' ');
        
        var street = string.Join(" ", streetHouseNumber.Take(streetHouseNumber.Length - 1));
        var houseNumber = streetHouseNumber.Last();
        
        var postalCodeCity = parts[1].Trim().Split(' ');
        var postalCode = postalCodeCity[0];
        var city = postalCodeCity.Last();
        

        return new EventLocation(street, houseNumber, city, postalCode);
    }
        
    private async Task CreateQuotationAsync()
    {

       var eventLocation =  ParseAddress(EventDetailsState.FormattedAddress);
        List<EquipmentDto.Lines> equipments = new();
        if (ExtraMaterialState.ExtrasAmount.Count != 0)
        {
            foreach (var item in ExtraMaterialState.ExtrasAmount)
            {
                if (item.Value != 0)
                {
                    equipments.Add(new EquipmentDto.Lines()
                    {
                        EquipmentId = item.Key,
                        Amount = item.Value,
                    }); 
                }
                
            }   
        }
        
        QuotationDto.Create quotation = new QuotationDto.Create
        {
            FormulaId = FormulaState.ChosenFormulaId,
            
            EventLocation = new()
            {
                Street = eventLocation.Street,
                HouseNumber = eventLocation.HouseNumber,
                PostalCode = eventLocation.PostalCode,
                City = eventLocation.City
            },
            StartTime = (DateTime) EventDetailsState.dateRange.Start ,
            EndTime = (DateTime) EventDetailsState.dateRange.End,
            Equipments = equipments,
            Customer = new()
            {
                FirstName = PersonalDetailsState.PersonalDetailsObject.FirstName,
                LastName = PersonalDetailsState.PersonalDetailsObject.LastName,
                Email = new()
                {
                    Email = PersonalDetailsState.PersonalDetailsObject.Email
                },
                BillingAddress = new()
                {
                    Street = PersonalDetailsState.PersonalDetailsObject.Street,
                    HouseNumber = PersonalDetailsState.PersonalDetailsObject.Housenumber,
                    PostalCode = PersonalDetailsState.PersonalDetailsObject.PostalCode,
                    City = PersonalDetailsState.PersonalDetailsObject.City,
                },
                PhoneNumber = PersonalDetailsState.PersonalDetailsObject.PhoneNumber,
                VatNumber = PersonalDetailsState.PersonalDetailsObject.BtwNumber
            },
            IsTripelBier = EventDetailsState.HasTripleBeer,
            NumberOfPeople = EventDetailsState.NumberOfPeople
        };

        

        
        var result = await QuotationService.CreateAsync(quotation);
        ClearAllStates();
        OpenDialog();
    }

    private void ClearAllStates()
    {
        EventDetailsState.Clear();
        FormulaState.Clear();
        ExtraMaterialState.Clear();
        PersonalDetailsState.PersonalDetailsObject.Clear();
    }
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<ConfirmationDialog>("Confirmatie Offerte", options);
    }

    private Marker? _selectedLocation;

    private GoogleMap Map { get; set; } = default!;

    private readonly MapOptions _options = new()
        { Zoom = 13, Center = new LatLngLiteral { Lat = 50.93735122680664, Lng = 4.03336238861084 }, MapTypeId = MapTypeId.Roadmap, DisableDefaultUI = true, };

    private async Task UpdateMarker(Marker marker)
    {
        if (_selectedLocation is not null) await _selectedLocation.SetMap(null);
        _selectedLocation = marker;
    }

    private async Task OnAfterMapInit()
    {
        await Map.InteropObject.SetCenter(EventDetailsState.PlaceGeometry.Location);
        await Map.InteropObject.SetZoom(13);

        var marker = await Marker.CreateAsync(Map.JsRuntime, new MarkerOptions
            {
                Position = EventDetailsState.PlaceGeometry.Location,
                Map = Map.InteropObject,
                Title = GetEventLocationTitle(),
            });
        await UpdateMarker(marker);


    }

    private string GetEventLocationTitle()
    {
        return EventDetailsState.PlaceTitle;
    }

    private string CheckIfBtwNumberIsEmpty()
    {
        if (PersonalDetailsState.PersonalDetailsObject.BtwNumber is null || string.IsNullOrWhiteSpace(PersonalDetailsState.PersonalDetailsObject.BtwNumber))
        {
            return "Geen Btw-nummer opgegeven";
        }
        else
        {
            return PersonalDetailsState.PersonalDetailsObject.BtwNumber;
        }
    }

}
