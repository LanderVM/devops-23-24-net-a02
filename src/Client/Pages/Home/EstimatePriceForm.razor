@using shared.Quotations
@using shared.Equipment
@using shared.Formulas
@using global::Shared.Common
<Loader IsLoading="@(ExtraEquipment == null && Formulas == null)">
    <EditForm Model="@QuotationEstimateState" OnValidSubmit="Submit">
        <Blazored.FluentValidation.FluentValidationValidator/>

        <MudContainer>
            <MudGrid Justify="Justify.SpaceBetween" Class="my-5">
                <MudItem xs="12">
                    <MudDateRangePicker Color="Color.Primary"
                                        Elevation="2"
                                        Label="Placeholder"
                                        Editable="true"
                                        Required="true"
                                        Immediate="true"
                                        @bind-DateRange="@QuotationEstimateState.DateRange"
                                        PlaceholderStart="Start datum"
                                        PlaceholderEnd="Eind datum"
                                        Date="@(DateTime.Today.AddDays(1))"
                                        PickerVariant="PickerVariant.Static"
                                        IsDateDisabledFunc="@((DateTime dt) => dt.Date < DateTime.Now.Date || IsDateDisabled(dt.Date, UnavailableDates))" />
                </MudItem>
            </MudGrid>

            <MudGrid Justify="Justify.SpaceBetween" Class="my-5 align-center">
                <MudItem md="5" xs="8">
                    <MudSelect ToStringFunc="@converterFormula" Required="true" Placeholder="Selecteer uw formule" Label="Formule" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="QuotationEstimateState.FormulaId">
                        @foreach (var item in Formulas)
                        {
                            <MudSelectItem Value=@item></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem Class="justify-center" md="2" xs="4">
                    <MudText Align="Align.Center">Met</MudText>
                </MudItem>
                <MudItem md="2" xs="6">
                    <MudNumericField Immediate="true"
                                     Label="Aantal"
                                     @bind-Value="QuotationEstimateState.EstimatedNumberOfPeople"
                                     Variant="Variant.Outlined"
                                     Min="1"/>
                </MudItem>
                <MudItem Class="justify-center" md="3" xs="4">
                    <MudText Align="Align.Center">personen</MudText>
                </MudItem>
            </MudGrid>
            <MudGrid Class="my-5 align-center">
                <MudItem md="6" xs="12">
                    <MudSelect Immediate="true" T="EquipmentDto.Select" ToStringFunc="@converter" MultiSelection="true" @bind-SelectedValues="QuotationEstimateState.Equipment" Label="Materiaal" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Clearable>
                        @foreach (var item in ExtraEquipment)
                        {
                            <MudSelectItem Value=@item></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudGrid Class="my-5 align-center">
                <MudItem>
                    <MudText>Tripel bier?</MudText>
                </MudItem>
                <MudItem>
                    <MudCheckBox Immediate="true" @bind-Checked="QuotationEstimateState.IsTripelBier"></MudCheckBox>
                </MudItem>
            </MudGrid>

            <MudGrid Class="my-5" Spacing="5">
                @if (_showPrice)
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.h4" Align="Align.Center">Dit zal rond de € @Math.Round(price, 2) liggen</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Align="Align.Center">Deze prijs is een schatting en ligt dus niet vast</MudText>
                    </MudItem>
                }

                <MudItem xs="6">
                    <MudButton Class="d-flex align-center justify-center mud-width-full py-2" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" OnClick="@(async () => await Submit())">
                        Bereken prijs
                    </MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudButton Class="d-flex align-center justify-center mud-width-full py-2" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" OnClick="@ToFormulas">
                        Naar Formules
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </EditForm>
</Loader>

@code {

    [Inject]
    public IQuotationService QuotationService { get; set; } = default!;

    [Inject]
    public QuotationEstimateState QuotationEstimateState { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;

    [Parameter]
    public EventCallback Close { get; set; }

    [Parameter]
    public EventCallback Refresh { get; set; }

    public bool _showPrice { get; set; }
    public decimal price { get; set; }

    private IEnumerable<EquipmentDto.Select>? ExtraEquipment;
    private IEnumerable<FormulaDto.Select>? Formulas;
    private IEnumerable<DateDto>? UnavailableDates;

    protected override async Task OnInitializedAsync()
    {
        QuotationEstimateState.Clear();
        _showPrice = false;
        var response = await QuotationService.GetPriceEstimationDetailsAsync();

        ExtraEquipment = response.Equipment;
        Formulas = response.Formulas;
        UnavailableDates = response.UnavailableDates;
    }

    private async Task Submit()
    {
        if (CheckForErrors())
        {
            GetPriceEstimate();
        }
    }

    public void ToFormulas()
    {
        NavigationManager.NavigateTo(Routes.Formula);
    }

    readonly Func<EquipmentDto.Select, string> converter = p => p?.Title;
    readonly Func<FormulaDto.Select, string> converterFormula = p => p?.Title;


    private async void GetPriceEstimate()
    {
        var ids = QuotationEstimateState.Equipment?
            .Where(x => x != null)
            .Select(x => x.Id)
            .ToList() ?? new List<int>();

        var estimate = new QuotationDto.Estimate
        {
            FormulaId = QuotationEstimateState.FormulaId.Id,
            EquipmentIds = ids,
            EstimatedNumberOfPeople = QuotationEstimateState.EstimatedNumberOfPeople,
            IsTripelBier = QuotationEstimateState.IsTripelBier,
            StartTime = QuotationEstimateState.DateRange.Start.Value.Ticks,
            EndTime = QuotationEstimateState.DateRange.End.Value.Ticks
        };

        var result = await QuotationService.GetPriceEstimationPrice(estimate);
        price = result.EstimatedPrice;
        _showPrice = true;

        StateHasChanged();
    }

    private bool IsDateDisabled(DateTime date, IEnumerable<DateDto> ranges)
    {
        if (ranges != null)
        {
            foreach (var range in ranges)
            {
                var startDateTime = range.StartTime;
                var endDateTime = range.EndTime;

                if (date.Date >= startDateTime.Date && date.Date <= endDateTime.Date)
                {
                    return true;
                }
            }
        }

        return false;
    }

    private bool CheckForErrors()
    {
        if (QuotationEstimateState.DateRange == null || !QuotationEstimateState.DateRange.End.HasValue || !QuotationEstimateState.DateRange.End.HasValue)
        {
            Snackbar.Add("Gelieve een geldige start- en einddag aan te duiden", Severity.Error);
            return false;
        }
        if (QuotationEstimateState.FormulaId == null)
        {
            Snackbar.Add("Gelieve een Formule te selecteren", Severity.Error);
            return false;
        }

        if (QuotationEstimateState.DateRange.End == QuotationEstimateState.DateRange.Start)
        {
            QuotationEstimateState.DateRange.End = QuotationEstimateState.DateRange.Start.Value.AddSeconds(1);
        }

        return true;
    }

}